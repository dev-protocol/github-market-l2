/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface MockMarketInterface extends ethers.utils.Interface {
	functions: {
		'authenticate(address,string[])': FunctionFragment
		'authenticateFromPropertyFactory(address,address,string[])': FunctionFragment
		'authenticatedCallback(address,bytes32)': FunctionFragment
		'behavior()': FunctionFragment
		'deauthenticate(address)': FunctionFragment
		'enabled()': FunctionFragment
		'issuedMetrics()': FunctionFragment
		'latestMetrics()': FunctionFragment
		'name()': FunctionFragment
		'schema()': FunctionFragment
		'setLatestMetrics(address)': FunctionFragment
		'toEnable()': FunctionFragment
		'votingEndTimestamp()': FunctionFragment
	}

	encodeFunctionData(
		functionFragment: 'authenticate',
		values: [string, string[]]
	): string
	encodeFunctionData(
		functionFragment: 'authenticateFromPropertyFactory',
		values: [string, string, string[]]
	): string
	encodeFunctionData(
		functionFragment: 'authenticatedCallback',
		values: [string, BytesLike]
	): string
	encodeFunctionData(functionFragment: 'behavior', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'deauthenticate',
		values: [string]
	): string
	encodeFunctionData(functionFragment: 'enabled', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'issuedMetrics',
		values?: undefined
	): string
	encodeFunctionData(
		functionFragment: 'latestMetrics',
		values?: undefined
	): string
	encodeFunctionData(functionFragment: 'name', values?: undefined): string
	encodeFunctionData(functionFragment: 'schema', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'setLatestMetrics',
		values: [string]
	): string
	encodeFunctionData(functionFragment: 'toEnable', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'votingEndTimestamp',
		values?: undefined
	): string

	decodeFunctionResult(
		functionFragment: 'authenticate',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'authenticateFromPropertyFactory',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'authenticatedCallback',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'behavior', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'deauthenticate',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'enabled', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'issuedMetrics',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'latestMetrics',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'schema', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'setLatestMetrics',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'toEnable', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'votingEndTimestamp',
		data: BytesLike
	): Result

	events: {}
}

export class MockMarket extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this

	listeners(eventName?: string): Array<Listener>
	off(eventName: string, listener: Listener): this
	on(eventName: string, listener: Listener): this
	once(eventName: string, listener: Listener): this
	removeListener(eventName: string, listener: Listener): this
	removeAllListeners(eventName?: string): this

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

	interface: MockMarketInterface

	functions: {
		authenticate(
			arg0: string,
			arg1: string[],
			overrides?: CallOverrides
		): Promise<[boolean]>

		authenticateFromPropertyFactory(
			arg0: string,
			arg1: string,
			arg2: string[],
			overrides?: CallOverrides
		): Promise<[boolean]>

		authenticatedCallback(
			arg0: string,
			arg1: BytesLike,
			overrides?: CallOverrides
		): Promise<[string]>

		behavior(overrides?: CallOverrides): Promise<[string]>

		deauthenticate(arg0: string, overrides?: CallOverrides): Promise<[void]>

		enabled(overrides?: CallOverrides): Promise<[boolean]>

		issuedMetrics(overrides?: CallOverrides): Promise<[BigNumber]>

		latestMetrics(overrides?: CallOverrides): Promise<[string]>

		name(overrides?: CallOverrides): Promise<[string]>

		schema(overrides?: CallOverrides): Promise<[string]>

		setLatestMetrics(
			_metrics: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		toEnable(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		votingEndTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>
	}

	authenticate(
		arg0: string,
		arg1: string[],
		overrides?: CallOverrides
	): Promise<boolean>

	authenticateFromPropertyFactory(
		arg0: string,
		arg1: string,
		arg2: string[],
		overrides?: CallOverrides
	): Promise<boolean>

	authenticatedCallback(
		arg0: string,
		arg1: BytesLike,
		overrides?: CallOverrides
	): Promise<string>

	behavior(overrides?: CallOverrides): Promise<string>

	deauthenticate(arg0: string, overrides?: CallOverrides): Promise<void>

	enabled(overrides?: CallOverrides): Promise<boolean>

	issuedMetrics(overrides?: CallOverrides): Promise<BigNumber>

	latestMetrics(overrides?: CallOverrides): Promise<string>

	name(overrides?: CallOverrides): Promise<string>

	schema(overrides?: CallOverrides): Promise<string>

	setLatestMetrics(
		_metrics: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	toEnable(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	votingEndTimestamp(overrides?: CallOverrides): Promise<BigNumber>

	callStatic: {
		authenticate(
			arg0: string,
			arg1: string[],
			overrides?: CallOverrides
		): Promise<boolean>

		authenticateFromPropertyFactory(
			arg0: string,
			arg1: string,
			arg2: string[],
			overrides?: CallOverrides
		): Promise<boolean>

		authenticatedCallback(
			arg0: string,
			arg1: BytesLike,
			overrides?: CallOverrides
		): Promise<string>

		behavior(overrides?: CallOverrides): Promise<string>

		deauthenticate(arg0: string, overrides?: CallOverrides): Promise<void>

		enabled(overrides?: CallOverrides): Promise<boolean>

		issuedMetrics(overrides?: CallOverrides): Promise<BigNumber>

		latestMetrics(overrides?: CallOverrides): Promise<string>

		name(overrides?: CallOverrides): Promise<string>

		schema(overrides?: CallOverrides): Promise<string>

		setLatestMetrics(_metrics: string, overrides?: CallOverrides): Promise<void>

		toEnable(overrides?: CallOverrides): Promise<void>

		votingEndTimestamp(overrides?: CallOverrides): Promise<BigNumber>
	}

	filters: {}

	estimateGas: {
		authenticate(
			arg0: string,
			arg1: string[],
			overrides?: CallOverrides
		): Promise<BigNumber>

		authenticateFromPropertyFactory(
			arg0: string,
			arg1: string,
			arg2: string[],
			overrides?: CallOverrides
		): Promise<BigNumber>

		authenticatedCallback(
			arg0: string,
			arg1: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>

		behavior(overrides?: CallOverrides): Promise<BigNumber>

		deauthenticate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

		enabled(overrides?: CallOverrides): Promise<BigNumber>

		issuedMetrics(overrides?: CallOverrides): Promise<BigNumber>

		latestMetrics(overrides?: CallOverrides): Promise<BigNumber>

		name(overrides?: CallOverrides): Promise<BigNumber>

		schema(overrides?: CallOverrides): Promise<BigNumber>

		setLatestMetrics(
			_metrics: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		toEnable(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		votingEndTimestamp(overrides?: CallOverrides): Promise<BigNumber>
	}

	populateTransaction: {
		authenticate(
			arg0: string,
			arg1: string[],
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		authenticateFromPropertyFactory(
			arg0: string,
			arg1: string,
			arg2: string[],
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		authenticatedCallback(
			arg0: string,
			arg1: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		behavior(overrides?: CallOverrides): Promise<PopulatedTransaction>

		deauthenticate(
			arg0: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

		issuedMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>

		latestMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>

		schema(overrides?: CallOverrides): Promise<PopulatedTransaction>

		setLatestMetrics(
			_metrics: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		toEnable(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		votingEndTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>
	}
}
