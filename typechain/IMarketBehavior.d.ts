/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface IMarketBehaviorInterface extends ethers.utils.Interface {
	functions: {
		'associatedMarket()': FunctionFragment
		'authenticate(address,string[],address)': FunctionFragment
		'getId(address)': FunctionFragment
		'getMetrics(string)': FunctionFragment
		'name()': FunctionFragment
		'schema()': FunctionFragment
		'setAssociatedMarket(address)': FunctionFragment
	}

	encodeFunctionData(
		functionFragment: 'associatedMarket',
		values?: undefined
	): string
	encodeFunctionData(
		functionFragment: 'authenticate',
		values: [string, string[], string]
	): string
	encodeFunctionData(functionFragment: 'getId', values: [string]): string
	encodeFunctionData(functionFragment: 'getMetrics', values: [string]): string
	encodeFunctionData(functionFragment: 'name', values?: undefined): string
	encodeFunctionData(functionFragment: 'schema', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'setAssociatedMarket',
		values: [string]
	): string

	decodeFunctionResult(
		functionFragment: 'associatedMarket',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'authenticate',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'getId', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getMetrics', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'schema', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'setAssociatedMarket',
		data: BytesLike
	): Result

	events: {}
}

export class IMarketBehavior extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this

	listeners(eventName?: string): Array<Listener>
	off(eventName: string, listener: Listener): this
	on(eventName: string, listener: Listener): this
	once(eventName: string, listener: Listener): this
	removeListener(eventName: string, listener: Listener): this
	removeAllListeners(eventName?: string): this

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

	interface: IMarketBehaviorInterface

	functions: {
		associatedMarket(overrides?: CallOverrides): Promise<[string]>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		getId(_metrics: string, overrides?: CallOverrides): Promise<[string]>

		getMetrics(_id: string, overrides?: CallOverrides): Promise<[string]>

		name(overrides?: CallOverrides): Promise<[string]>

		schema(overrides?: CallOverrides): Promise<[string]>

		setAssociatedMarket(
			_market: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>
	}

	associatedMarket(overrides?: CallOverrides): Promise<string>

	authenticate(
		_prop: string,
		_args: string[],
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	getId(_metrics: string, overrides?: CallOverrides): Promise<string>

	getMetrics(_id: string, overrides?: CallOverrides): Promise<string>

	name(overrides?: CallOverrides): Promise<string>

	schema(overrides?: CallOverrides): Promise<string>

	setAssociatedMarket(
		_market: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	callStatic: {
		associatedMarket(overrides?: CallOverrides): Promise<string>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: CallOverrides
		): Promise<boolean>

		getId(_metrics: string, overrides?: CallOverrides): Promise<string>

		getMetrics(_id: string, overrides?: CallOverrides): Promise<string>

		name(overrides?: CallOverrides): Promise<string>

		schema(overrides?: CallOverrides): Promise<string>

		setAssociatedMarket(
			_market: string,
			overrides?: CallOverrides
		): Promise<void>
	}

	filters: {}

	estimateGas: {
		associatedMarket(overrides?: CallOverrides): Promise<BigNumber>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		getId(_metrics: string, overrides?: CallOverrides): Promise<BigNumber>

		getMetrics(_id: string, overrides?: CallOverrides): Promise<BigNumber>

		name(overrides?: CallOverrides): Promise<BigNumber>

		schema(overrides?: CallOverrides): Promise<BigNumber>

		setAssociatedMarket(
			_market: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>
	}

	populateTransaction: {
		associatedMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		getId(
			_metrics: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		getMetrics(
			_id: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>

		schema(overrides?: CallOverrides): Promise<PopulatedTransaction>

		setAssociatedMarket(
			_market: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>
	}
}
