/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface GitHubMarketInterface extends ethers.utils.Interface {
	functions: {
		'DEFAULT_ADMIN_ROLE()': FunctionFragment
		'KHAOS_ROLE()': FunctionFragment
		'OPERATOR_ROLE()': FunctionFragment
		'addKhaosRole(address)': FunctionFragment
		'addOperatorRole(address)': FunctionFragment
		'addPublicSignaturee(string)': FunctionFragment
		'associatedMarket()': FunctionFragment
		'authenticate(address,string[],address)': FunctionFragment
		'deleteKhaosRole(address)': FunctionFragment
		'deleteOperatorRole(address)': FunctionFragment
		'getId(address)': FunctionFragment
		'getMetrics(string)': FunctionFragment
		'getRoleAdmin(bytes32)': FunctionFragment
		'grantRole(bytes32,address)': FunctionFragment
		'hasRole(bytes32,address)': FunctionFragment
		'initialize(address)': FunctionFragment
		'khaosCallback(string,uint256,string)': FunctionFragment
		'name()': FunctionFragment
		'pause()': FunctionFragment
		'paused()': FunctionFragment
		'priorApproval()': FunctionFragment
		'registry()': FunctionFragment
		'renounceRole(bytes32,address)': FunctionFragment
		'revokeRole(bytes32,address)': FunctionFragment
		'schema()': FunctionFragment
		'setAssociatedMarket(address)': FunctionFragment
		'setPriorApprovalMode(bool)': FunctionFragment
		'supportsInterface(bytes4)': FunctionFragment
		'unpause()': FunctionFragment
	}

	encodeFunctionData(
		functionFragment: 'DEFAULT_ADMIN_ROLE',
		values?: undefined
	): string
	encodeFunctionData(functionFragment: 'KHAOS_ROLE', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'OPERATOR_ROLE',
		values?: undefined
	): string
	encodeFunctionData(functionFragment: 'addKhaosRole', values: [string]): string
	encodeFunctionData(
		functionFragment: 'addOperatorRole',
		values: [string]
	): string
	encodeFunctionData(
		functionFragment: 'addPublicSignaturee',
		values: [string]
	): string
	encodeFunctionData(
		functionFragment: 'associatedMarket',
		values?: undefined
	): string
	encodeFunctionData(
		functionFragment: 'authenticate',
		values: [string, string[], string]
	): string
	encodeFunctionData(
		functionFragment: 'deleteKhaosRole',
		values: [string]
	): string
	encodeFunctionData(
		functionFragment: 'deleteOperatorRole',
		values: [string]
	): string
	encodeFunctionData(functionFragment: 'getId', values: [string]): string
	encodeFunctionData(functionFragment: 'getMetrics', values: [string]): string
	encodeFunctionData(
		functionFragment: 'getRoleAdmin',
		values: [BytesLike]
	): string
	encodeFunctionData(
		functionFragment: 'grantRole',
		values: [BytesLike, string]
	): string
	encodeFunctionData(
		functionFragment: 'hasRole',
		values: [BytesLike, string]
	): string
	encodeFunctionData(functionFragment: 'initialize', values: [string]): string
	encodeFunctionData(
		functionFragment: 'khaosCallback',
		values: [string, BigNumberish, string]
	): string
	encodeFunctionData(functionFragment: 'name', values?: undefined): string
	encodeFunctionData(functionFragment: 'pause', values?: undefined): string
	encodeFunctionData(functionFragment: 'paused', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'priorApproval',
		values?: undefined
	): string
	encodeFunctionData(functionFragment: 'registry', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'renounceRole',
		values: [BytesLike, string]
	): string
	encodeFunctionData(
		functionFragment: 'revokeRole',
		values: [BytesLike, string]
	): string
	encodeFunctionData(functionFragment: 'schema', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'setAssociatedMarket',
		values: [string]
	): string
	encodeFunctionData(
		functionFragment: 'setPriorApprovalMode',
		values: [boolean]
	): string
	encodeFunctionData(
		functionFragment: 'supportsInterface',
		values: [BytesLike]
	): string
	encodeFunctionData(functionFragment: 'unpause', values?: undefined): string

	decodeFunctionResult(
		functionFragment: 'DEFAULT_ADMIN_ROLE',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'KHAOS_ROLE', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'OPERATOR_ROLE',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'addKhaosRole',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'addOperatorRole',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'addPublicSignaturee',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'associatedMarket',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'authenticate',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'deleteKhaosRole',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'deleteOperatorRole',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'getId', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getMetrics', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'getRoleAdmin',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'khaosCallback',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'priorApproval',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'registry', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'renounceRole',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'schema', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'setAssociatedMarket',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'setPriorApprovalMode',
		data: BytesLike
	): Result
	decodeFunctionResult(
		functionFragment: 'supportsInterface',
		data: BytesLike
	): Result
	decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result

	events: {
		'Authenticated(string,uint256,string)': EventFragment
		'Paused(address)': EventFragment
		'Query(string,string,address)': EventFragment
		'Registered(address,string)': EventFragment
		'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
		'RoleGranted(bytes32,address,address)': EventFragment
		'RoleRevoked(bytes32,address,address)': EventFragment
		'Unpaused(address)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'Authenticated'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Query'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Registered'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class GitHubMarket extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this

	listeners(eventName?: string): Array<Listener>
	off(eventName: string, listener: Listener): this
	on(eventName: string, listener: Listener): this
	once(eventName: string, listener: Listener): this
	removeListener(eventName: string, listener: Listener): this
	removeAllListeners(eventName?: string): this

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

	interface: GitHubMarketInterface

	functions: {
		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

		KHAOS_ROLE(overrides?: CallOverrides): Promise<[string]>

		OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>

		addKhaosRole(
			_khaos: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		addOperatorRole(
			_operator: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		addPublicSignaturee(
			_publicSignature: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		associatedMarket(overrides?: CallOverrides): Promise<[string]>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		deleteKhaosRole(
			_khaos: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		deleteOperatorRole(
			_operator: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		getId(_metrics: string, overrides?: CallOverrides): Promise<[string]>

		getMetrics(
			_repository: string,
			overrides?: CallOverrides
		): Promise<[string]>

		getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

		grantRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		hasRole(
			role: BytesLike,
			account: string,
			overrides?: CallOverrides
		): Promise<[boolean]>

		initialize(
			_registry: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		khaosCallback(
			_githubRepository: string,
			_status: BigNumberish,
			_message: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		name(overrides?: CallOverrides): Promise<[string]>

		pause(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		paused(overrides?: CallOverrides): Promise<[boolean]>

		priorApproval(overrides?: CallOverrides): Promise<[boolean]>

		registry(overrides?: CallOverrides): Promise<[string]>

		renounceRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		revokeRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		schema(overrides?: CallOverrides): Promise<[string]>

		setAssociatedMarket(
			_associatedMarket: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		setPriorApprovalMode(
			_value: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<[boolean]>

		unpause(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>
	}

	DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

	KHAOS_ROLE(overrides?: CallOverrides): Promise<string>

	OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

	addKhaosRole(
		_khaos: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	addOperatorRole(
		_operator: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	addPublicSignaturee(
		_publicSignature: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	associatedMarket(overrides?: CallOverrides): Promise<string>

	authenticate(
		_prop: string,
		_args: string[],
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	deleteKhaosRole(
		_khaos: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	deleteOperatorRole(
		_operator: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	getId(_metrics: string, overrides?: CallOverrides): Promise<string>

	getMetrics(_repository: string, overrides?: CallOverrides): Promise<string>

	getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

	grantRole(
		role: BytesLike,
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	hasRole(
		role: BytesLike,
		account: string,
		overrides?: CallOverrides
	): Promise<boolean>

	initialize(
		_registry: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	khaosCallback(
		_githubRepository: string,
		_status: BigNumberish,
		_message: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	name(overrides?: CallOverrides): Promise<string>

	pause(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	paused(overrides?: CallOverrides): Promise<boolean>

	priorApproval(overrides?: CallOverrides): Promise<boolean>

	registry(overrides?: CallOverrides): Promise<string>

	renounceRole(
		role: BytesLike,
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	revokeRole(
		role: BytesLike,
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	schema(overrides?: CallOverrides): Promise<string>

	setAssociatedMarket(
		_associatedMarket: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	setPriorApprovalMode(
		_value: boolean,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	supportsInterface(
		interfaceId: BytesLike,
		overrides?: CallOverrides
	): Promise<boolean>

	unpause(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>

	callStatic: {
		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

		KHAOS_ROLE(overrides?: CallOverrides): Promise<string>

		OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

		addKhaosRole(_khaos: string, overrides?: CallOverrides): Promise<void>

		addOperatorRole(_operator: string, overrides?: CallOverrides): Promise<void>

		addPublicSignaturee(
			_publicSignature: string,
			overrides?: CallOverrides
		): Promise<void>

		associatedMarket(overrides?: CallOverrides): Promise<string>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: CallOverrides
		): Promise<boolean>

		deleteKhaosRole(_khaos: string, overrides?: CallOverrides): Promise<void>

		deleteOperatorRole(
			_operator: string,
			overrides?: CallOverrides
		): Promise<void>

		getId(_metrics: string, overrides?: CallOverrides): Promise<string>

		getMetrics(_repository: string, overrides?: CallOverrides): Promise<string>

		getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

		grantRole(
			role: BytesLike,
			account: string,
			overrides?: CallOverrides
		): Promise<void>

		hasRole(
			role: BytesLike,
			account: string,
			overrides?: CallOverrides
		): Promise<boolean>

		initialize(_registry: string, overrides?: CallOverrides): Promise<void>

		khaosCallback(
			_githubRepository: string,
			_status: BigNumberish,
			_message: string,
			overrides?: CallOverrides
		): Promise<void>

		name(overrides?: CallOverrides): Promise<string>

		pause(overrides?: CallOverrides): Promise<void>

		paused(overrides?: CallOverrides): Promise<boolean>

		priorApproval(overrides?: CallOverrides): Promise<boolean>

		registry(overrides?: CallOverrides): Promise<string>

		renounceRole(
			role: BytesLike,
			account: string,
			overrides?: CallOverrides
		): Promise<void>

		revokeRole(
			role: BytesLike,
			account: string,
			overrides?: CallOverrides
		): Promise<void>

		schema(overrides?: CallOverrides): Promise<string>

		setAssociatedMarket(
			_associatedMarket: string,
			overrides?: CallOverrides
		): Promise<void>

		setPriorApprovalMode(
			_value: boolean,
			overrides?: CallOverrides
		): Promise<void>

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<boolean>

		unpause(overrides?: CallOverrides): Promise<void>
	}

	filters: {
		Authenticated(
			_repository?: null,
			_status?: null,
			message?: null
		): TypedEventFilter<
			[string, BigNumber, string],
			{ _repository: string; _status: BigNumber; message: string }
		>

		Paused(account?: null): TypedEventFilter<[string], { account: string }>

		Query(
			githubRepository?: null,
			publicSignature?: null,
			account?: null
		): TypedEventFilter<
			[string, string, string],
			{ githubRepository: string; publicSignature: string; account: string }
		>

		Registered(
			_metrics?: null,
			_repository?: null
		): TypedEventFilter<
			[string, string],
			{ _metrics: string; _repository: string }
		>

		RoleAdminChanged(
			role?: BytesLike | null,
			previousAdminRole?: BytesLike | null,
			newAdminRole?: BytesLike | null
		): TypedEventFilter<
			[string, string, string],
			{ role: string; previousAdminRole: string; newAdminRole: string }
		>

		RoleGranted(
			role?: BytesLike | null,
			account?: string | null,
			sender?: string | null
		): TypedEventFilter<
			[string, string, string],
			{ role: string; account: string; sender: string }
		>

		RoleRevoked(
			role?: BytesLike | null,
			account?: string | null,
			sender?: string | null
		): TypedEventFilter<
			[string, string, string],
			{ role: string; account: string; sender: string }
		>

		Unpaused(account?: null): TypedEventFilter<[string], { account: string }>
	}

	estimateGas: {
		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

		KHAOS_ROLE(overrides?: CallOverrides): Promise<BigNumber>

		OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>

		addKhaosRole(
			_khaos: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		addOperatorRole(
			_operator: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		addPublicSignaturee(
			_publicSignature: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		associatedMarket(overrides?: CallOverrides): Promise<BigNumber>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		deleteKhaosRole(
			_khaos: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		deleteOperatorRole(
			_operator: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		getId(_metrics: string, overrides?: CallOverrides): Promise<BigNumber>

		getMetrics(
			_repository: string,
			overrides?: CallOverrides
		): Promise<BigNumber>

		getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

		grantRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		hasRole(
			role: BytesLike,
			account: string,
			overrides?: CallOverrides
		): Promise<BigNumber>

		initialize(
			_registry: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		khaosCallback(
			_githubRepository: string,
			_status: BigNumberish,
			_message: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		name(overrides?: CallOverrides): Promise<BigNumber>

		pause(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		paused(overrides?: CallOverrides): Promise<BigNumber>

		priorApproval(overrides?: CallOverrides): Promise<BigNumber>

		registry(overrides?: CallOverrides): Promise<BigNumber>

		renounceRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		revokeRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		schema(overrides?: CallOverrides): Promise<BigNumber>

		setAssociatedMarket(
			_associatedMarket: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		setPriorApprovalMode(
			_value: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>

		unpause(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>
	}

	populateTransaction: {
		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

		KHAOS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

		OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

		addKhaosRole(
			_khaos: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		addOperatorRole(
			_operator: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		addPublicSignaturee(
			_publicSignature: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		associatedMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>

		authenticate(
			_prop: string,
			_args: string[],
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		deleteKhaosRole(
			_khaos: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		deleteOperatorRole(
			_operator: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		getId(
			_metrics: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		getMetrics(
			_repository: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		getRoleAdmin(
			role: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		grantRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		hasRole(
			role: BytesLike,
			account: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		initialize(
			_registry: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		khaosCallback(
			_githubRepository: string,
			_status: BigNumberish,
			_message: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>

		pause(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

		priorApproval(overrides?: CallOverrides): Promise<PopulatedTransaction>

		registry(overrides?: CallOverrides): Promise<PopulatedTransaction>

		renounceRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		revokeRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		schema(overrides?: CallOverrides): Promise<PopulatedTransaction>

		setAssociatedMarket(
			_associatedMarket: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		setPriorApprovalMode(
			_value: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>

		unpause(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>
	}
}
